import org.apache.tools.ant.filters.ReplaceTokens

ext {
    getBuildNumber = { ->
        return file('./buildNumber.txt').text as Integer
    }

    incrementBuildNumber = { ->
        File file = file('./buildNumber.txt')
        int buildNumber = ++(file.text as Integer)
        file.text = buildNumber
    }
}

/*task incrementBuildNumber {
    File file = file('./buildNumber.txt')
    int buildNumber = ++(file.text as Integer)
    file.text = buildNumber
}*/

allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group 'com.jesus-crie'
    version('2.5.0_' + getBuildNumber())

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.encoding = 'UTF-8'
    javadoc.options.encoding = 'UTF-8'

    archivesBaseName = name

    ext {
        name = 'ModularBot'
        nightConfigVersion = '3.6.0' // Change in the readme too line 231.
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        testImplementation "org.junit.platform:junit-platform-gradle-plugin:1.2.0"
        testImplementation 'org.junit.platform:junit-platform-launcher:1.2.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.2.0'
        testImplementation 'org.hamcrest:hamcrest-junit:2.0.0.0'
    }

    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }
}

project(':modularbot-core') {
    ext.name = 'ModularBot - Core'
    project.description = 'A java framework based on JDA that helps you create your discord bot.'

    task sourcesForRelease(type: Copy) {
        from './ModularBot-Core/src/main/java'
        into './ModularBot-Core/build/filteredSrc'
        filter(ReplaceTokens, tokens: [
                versionName : version,
                versionBuild: getBuildNumber()
        ])
    }

    compileJava {
        options.compilerArgs += ["-parameters"]
    }
}

project(':modularbot-logger') {
    ext.name = 'ModularBot - Logger'
    project.description = 'Module with a default implementation of SLF4J.'
}

project(':modularbot-command') {
    ext.name = 'ModularBot - Command'
    project.description = 'Module that enable the support of commands.'
}

project(':modularbot-night-config-wrapper') {
    ext.name = 'ModularBot - Night Config Wrapper'
    project.description = 'A wrapper of https://github.com/TheElectronWill/Night-Config .'
}

project(':modularbot-nashorn-support') {
    ext.name = 'ModularBot - JS Nashorn Support'
    project.description = 'Module that can load modules in JavaScript.'
}

project(':modularbot-nashorn-command-support') {
    ext.name = 'ModularBot - JS Nashorn Command Support'
    project.description = 'Extension of the JS module that supports the command module.'
}

project(':modularbot-message-decorator') {
    ext.name = 'ModularBot - Message Decorator'
    project.description = 'Module that can bind to specific messages and extends their behaviour.'
}

project(':modularbot-graalvm-support') {
    ext.name = 'ModularBot - GraalVM Support'
    project.description = 'Module that enable the support of module written in any languages supported by GraalVM.'
}

project(':modularbot-graalvm-support-discordjs') {
    ext.name = 'ModularBot - GraalVM Support DJS'
    project.description = 'Extension to the GraalVM module that emulates the DiscordJS API.'
}

subprojects {
    artifacts {
        archives javadocJar
        archives sourcesJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = project.ext.name
                    description = project.description
                    url = 'https://github.com/JesusCrie/ModularBot'

                    developers {
                        developer {
                            id = 'com.jesus_crie'
                            name = 'Lucas Malandrino'
                            email = 'lucas.malandrino@gmail.com'
                            url = 'https://github.com/JesusCrie'
                        }
                    }

                    licenses {
                        license {
                            name = 'GNU General Public License v3.0'
                            url = 'https://opensource.org/licenses/GPL-3.0'
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/JesusCrie/ModularBot_v2.git'
                        developerConnection = 'scm:git:ssh://github.com/JesusCrie/ModularBot.git'
                        url = 'https://github.com/JesusCrie/ModularBot'
                    }
                }
            }
        }

        repositories {
            maven {
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }

                def releaseRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotRepoUrl : releaseRepoUrl
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}
